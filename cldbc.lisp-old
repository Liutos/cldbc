(defpackage :cldbc
  (:use :cl :cl-mysql)
  (:export :select-fn
	   :insert-fn
	   :update-fn
	   :delete-fn
	   :get-connection
	   :make-result
	   :get-string-by-field
	   :reset-pointer
	   :result-content
	   :create-table
	   :deftable))

(in-package :cldbc)

(defclass result ()
  ((schema :initarg :schema
	   :reader result-schema)
   (content :initarg :content
	    :reader result-content)
   (pointer :initarg :pointer :initform 0
	    :accessor result-pointer))
  (:documentation "A result of a query action. Query includes select, insert, update and delete."))

(defun get-connection (user password database)
  "Connect to the database by means of the USER name, PASSWORD and if succeeded, access to DATABASE. This function will set the character encode appropriately."
  (declare (string user password database))
  (connect :user user :password password :database database)
  (query "set names 'utf8'"))

(defun mapend (fn list &optional not-end-action)
  "Call function FN with each element in proper LIST. If the element is not the last one, call the NOT-END-ACTION on it every time before calling the next one."
  (declare (function fn)
	   (list list))
  (when list
    (funcall fn (car list))
    (if (cdr list)
	(funcall not-end-action (car list)))
    (mapend fn (cdr list) not-end-action)))

(defun gen-cond-expr (requirements &optional (cond-type "WHERE"))
  "Generate a AND statement that each sub-clauses is the form like `left-value operation right-value'."
  (with-output-to-string (stream)
    (format stream " ~A " cond-type)
    (mapend #'(lambda (triple)
		(destructuring-bind (l op r) triple
		  (format stream "~A ~A '~A'" l op r)))
	    requirements
	    #'(lambda (x)
		(declare (ignore x))
		(format stream " AND ")))))

(defun gen-select-expr (fields table &optional requirements group-by order-by)
  (declare (list requirements)
	   (string table))
  (with-output-to-string (stream)
    (format stream "SELECT ")
    (if (eql '* fields)
	(format stream "*")
	(format stream "~{~A~^, ~}" fields))
    (format stream " FROM ~A" table)
    (if requirements
	(format stream "~A" (gen-cond-expr requirements)))
    (when group-by
      (format stream " GROUP BY ")
      (if (consp group-by)
	  (destructuring-bind (col reqs) group-by
	    (format stream "~A~A" col (gen-cond-expr reqs "HAVING")))
	  (format stream "~A" group-by)))
    (when order-by
      (format stream " ORDER BY ")
      (if (consp order-by)
	  (destructuring-bind (col order) order-by
	    (if (not (or (eql 'ASC order) (eql 'DESC order)))
		(error "Unknown type of order ~A" order)
		(format stream "~A ~A" col order)))
	  (format stream "~A" order-by)))))

(defmacro salet (key-values list &body body)
  `(let ,(mapcar #'(lambda (pair)
		     (destructuring-bind (k v) pair
		       `(,v (second (assoc ',k ,list)))))
		 key-values)
     ,@body))

(defun select-fn (fields table &rest clauses)
  "Select the FIELDS of rows in TABLE which meets the requirements in CLAUSES and format the output as described in CLAUSES."
  (salet ((where requirements)
	  (group-by group-by)
	  (order-by order-by))
      clauses
    (query (gen-select-expr fields table requirements group-by order-by))))

(defmacro select (fields table &body clauses)
  "The equivaient macro of function SELECT-FN."
  (salet ((where requirements)
	  (group-by group-by)
	  (order-by order-by))
      clauses
    `(query ,(gen-select-expr fields table requirements group-by order-by))))

(defun make-result (original-result)
  "Encapsulate the result of raw query into a defined class."
  (make-instance 'result
		 :schema (cadar original-result)
		 :content (caar original-result)))

(defun next-row (result)
  "Get the next row which hasn't been processed."
  (with-slots (content pointer) result
    (prog1
	(nth pointer content)
      (incf pointer))))

(defun map-row (fn result)
  "Act as function like mapcar, but for rows in instace of class result."
  (with-slots (content) result
    (mapcar fn content)))

(defun gen-insert-expr (table values &optional columns)
  (declare (string table)
	   (list columns values))
  (with-output-to-string (stream)
    (format stream "INSERT INTO ~A" table)
    (when columns
      (format stream " (~{~A~^, ~})" columns))
    (format stream " VALUES (~{'~A'~^, ~})" values)))

(defun insert-fn (table values &optional columns)
  "Insert the VALUES into TABLE according to the COLUMNS."
  (query (gen-insert-expr table values columns)))

(defmacro insert ((table &optional columns) values)
  "The equivaient macro of function INSERT-FN."
  `(query ,(gen-insert-expr table values columns)))

(defun gen-update-expr (table set-forms &optional requirements)
  (declare (string table)
	   (list set-forms requirements))
  (with-output-to-string (stream)
    (format stream "UPDATE ~A" table)
    (format stream " SET ~{~{~A = '~A'~}~^, ~}" set-forms)
    (when requirements
      (format stream "~A" (gen-cond-expr requirements)))))

(defun update-fn (table set-forms &optional requirements)
  "Set the fields of rows which meets the REQUIREMENTS in TABLE according to the SET-FORMS."
  (query (gen-update-expr table set-forms requirements)))

(defun gen-delete-expr (table &optional requirements)
  (declare (string table)
	   (list requirements))
  (with-output-to-string (stream)
    (format stream "DELETE FROM ~A" table)
    (when requirements
      (format stream "~A" (gen-cond-expr requirements)))))

(defun delete-fn (table &optional requirements)
  "Delete the row in TABLE which meets the REQUIREMENTS."
  (query (gen-delete-expr table requirements)))

(defun get-string-by-field (result field)
  "Get the value of the giving FIELD in the current row in RESULT."
  (let ((pos (position field (result-schema result)
		       :key #'car :test #'string-equal)))
    (if pos
	(nth pos (nth (result-pointer result)
		      (result-content result))))))

(defun reset-pointer (result)
  (setf (result-pointer result) 0))

(defun gen-field-spec-expr (field-name type &key (not-null nil not-null-p) auto-inc)
  (with-output-to-string (stream)
    (format stream "~A " field-name)
    (if (consp type)
	(format stream "~A(~A)" (first type) (second type))
	(format stream "~A" type))
    (if (and not-null-p not-null)
	(format stream " NOT NULL"))
    (if auto-inc
	(format stream " AUTO INCREMENT"))))

(defun gen-table-statement (table-name field-spec &key primary-key)
  (declare (string table-name)
	   (list field-spec))
  (with-output-to-string (stream)
    (format stream "CREATE TABLE ~A (" table-name)
    (mapend #'(lambda (field)
		(format stream "~A" (apply #'gen-field-spec-expr field)))
	    field-spec
	    #'(lambda (x)
		(declare (ignore x))
		(format stream ", ")))
    (if primary-key
	(format stream ", PRIMARY KEY (~{~A~^, ~})" primary-key))
    (format stream ")")))

(defun create-table (table-name field-spec &key primary-key)
  (query (gen-table-statement table-name field-spec
			      :primary-key primary-key)))

(defmacro deftable (table-name field-spec &key primary-key)
  `(create-table ,(format nil "~A" table-name) ',field-spec
		 :primary-key ',primary-key))